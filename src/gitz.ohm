Gitz {
  // Program structure
  Program = Statement*                                      --program

  // Statements
  Statement =
      VarDecl                                                 --stmtVarDecl
    | ListDecl                                                --stmtListDecl
    | FunDecl                                                 --stmtFunDecl
    | Assignment                                              --stmtAssignment
    | FunCallStatement                                        --stmtFunCall
    | ReturnStmt                                              --stmtReturn
    | IfStmt                                                  --stmtIf
    | LoopStmt                                                --stmtLoop
    | TryStmt                                                 --stmtTry
    | BreakStmt                                               --stmtBreak
    | ContinueStmt                                            --stmtContinue
    | SayStmt                                                 --stmtSay

  // Control flow statements
  FunCallStatement = FunCall ";"                              --funCallStmt
  BreakStmt        = "Break" ";"                              --breakStmt
  ContinueStmt     = "Skip" ";"                               --continueStmt
  SayStmt          = "say" "(" ExpList? ")" ";"               --sayStmt

  // Declarations
  VarDecl  = "Make" id ":" Type Initialiser? ";"              --varDecl
  ListDecl = "Make" id ":" ListType Initialiser? ";"          --listDecl

  Initialiser = "=" Exp                                       --init

  // Functions
  FunDecl =
      "Show" id Params ("->" Type)? Block                     --funDecl

  Params = "(" ParamList? ")"                                 --params
  ParamList = Param ("," Param)*                              --paramList
  Param  = id ":" Type                                        --param

  ReturnStmt = "give" Exp ";"                                 --returnStmt

  // Control structures
  IfStmt =
      "When" Exp Block (OrWhenClause)* ("orElse" Block)?       --ifStmt

  OrWhenClause = "orWhen" Exp Block                           --orWhenClause

  LoopStmt =
      "Keep" id "in" Exp Block                                --loopForEach
    | "Keep" Exp Block                                        --loopWhile

  // Expressions
  Assignment =
      (id | IndexedAccess) "=" Exp ";"                        --assignValid
    | IntLit "=" Exp ";"                                      --assignInvalid

  IndexedAccess = id "[" Exp "]"                              --index

  FunCall =
      id "(" ArgList ")"                                      --funCallArgs
    | id "(" ")"                                              --funCallNoArgs

  ArgList = Exp ("," Exp)*                                    --argList

  TryStmt = "Try" Block "Catch" id Block                      --tryStmt

  Block = "{" Statement* "}"                                  --block

  // Expression hierarchy
  Exp = LogicalOrExp                                          --exp

  LogicalOrExp = LogicalAndExp ("or" LogicalAndExp)*          --lor
  LogicalAndExp = EqualityExp ("and" EqualityExp)*            --land
  EqualityExp = RelationalExp (EqualityOp RelationalExp)*     --eqExp
  EqualityOp = "==" | "!=" | "equal" | "notSame"              --eqOp
  RelationalExp = AdditiveExp (RelOp AdditiveExp)*            --relExp
  RelOp = "<" | ">" | "bigger" | "smaller" | "in"             --relOp
  AdditiveExp = MultiplicativeExp (AddOp MultiplicativeExp)*  --addExp
  AddOp = "plus" | "minus"                                    --addOp
  MultiplicativeExp = UnaryExp (MulOp UnaryExp)*              --mulExp
  MulOp = "times" | "over" | "mod"                            --mulOp

  UnaryExp = ("minus" | "not")? PrimaryExp                    --unary

  PrimaryExp =
      "(" Exp ")"                                             --parens
    | FunCall                                                 --primaryFunCall
    | IndexedAccess                                           --primaryIndex
    | id                                                      --primaryId
    | FloatLit                                                --primaryFloat
    | IntLit                                                  --primaryInt
    | StringLit                                               --primaryString
    | ListExp                                                 --primaryList
    | booleanLiteral                                          --primaryBool

  booleanLiteral = "true" | "false"

  // Types
  Type = BasicType | ListType                                 --type
  BasicType = "num" | "text" | "bool" | id                    --basicType
  ListType =
      "list" "[" Type "]"                                     --listTypeSquare
    | "list" "<" Type ">"                                     --listTypeAngle

  // Identifiers
  id = ~keyword letter alnum*                                 --identifier

  // Literals
  IntLit   = digit+                                           --intLit
  FloatLit =
      digit+ "." digit+ ExpPart?                             --floatFull
    | digit+ "." ExpPart?                                    --floatTrailingDot
    | "." digit+ ExpPart?                                    --floatLeadingDot

  ExpPart = "E" ("+" | "-")? digit+

  StringLit =
      "\"" Char* "\""                                        --stringClosed
    | "\"" Char*                                             --stringUnclosed

  ListExp = "[" ExpList? "]"                                 --listExp
  ExpList = Exp ("," Exp)*                                   --expList

  // Character handling
  Char = NormalChar | EscapeSeq | unicodeEscape               --char
  NormalChar = ~Control ~"\\" ~"\"" any                       --normalChar
  EscapeSeq = "\\" ("n" | "t" | "\"" | "\\")                  --escapeSeq
  unicodeEscape = "\\u{" hexDigit+ "}"                        --unicodeEscape

  Control = "\x00".."\x1f" | "\x80".."\x9f"                  --control

  // Keywords
  keyword = "Make" | "list" | "Show" | "When" | "Keep" | "orWhen" 
      | "orElse" | "give" | "say" | "Break" | "Skip" | "Try" 
      | "Catch" 
      | "plus" | "minus" | "times" | "over" | "mod" 
      | "equal" | "notSame" | "bigger" | "smaller" | "in" 
      | "and" | "or" | "not" | "true" | "false" 
                                          --keyword

  // Whitespace and comments
  // Using built-in space handling with custom additions
  space += comment | multiLineComment
  comment = "#" (~"\n" any)*                                 --comment
  multiLineComment = "/*" (~"*/" any)* "*/"                  --multiComment
}