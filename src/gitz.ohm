Gitz {
  Program = Statement+

  // Statements
  Statement =
      VarDecl
    | ListDecl
    | FunDecl
    | Assignment
    | FunCallStatement
    | ReturnStmt
    | IfStmt
    | LoopStmt
    | TryStmt
    | BreakStmt
    | ContinueStmt
    | SayStmt

  FunCallStatement = FunCall ";"
  BreakStmt = "Break" ";"
  ContinueStmt = "Skip" ";"
  SayStmt = "say" "(" ListOf<Exp, ","> ")" ";"

  // Variable & List Declarations
  VarDecl = "Make" id ":" (BasicType | ListType) Initialiser ";"
  ListDecl = "Make" id ":" ListType Initialiser ";"

  // Initialization
  Initialiser = "=" Exp

  // Function Declaration
  FunDecl = "Show" id Params ("->" Type)? Block
  Params = "(" ListOf<Param, ","> ")"
  Param = id ":" Type

  // Return Statement
  ReturnStmt = "give" Exp ";"

  // If-Else Statements
  IfStmt = "When" Exp Block ("orWhen" Exp Block)* ("orElse" Block)?

  // Loop Statements
  LoopStmt = "Keep" id "in" Exp Block --forEach
           | "Keep" Exp Block          --whileLoop

  // Assignments
  Assignment = (id | IndexedAccess) "=" Exp ";" --valid
             | IntLit "=" Exp ";"               --invalid

  // Indexed list access
  IndexedAccess = id "[" Exp "]"

  // Function Calls (Fixed for empty and non-empty argument lists)
  FunCall = id "(" ListOf<Exp, ","> ")" --nonEmpty
          | id "(" ")" --empty

  // Try-Catch Blocks
  TryStmt = "Try" Block "Catch" id Block

  // Code Blocks
  Block = "{" Statement* "}"

  // Expressions (Ensuring function calls work inside expressions)
  Exp = LogicalOrExp
  LogicalOrExp = LogicalAndExp ("or" LogicalAndExp)*
  LogicalAndExp = EqualityExp ("and" EqualityExp)*
  EqualityExp = RelationalExp (("==" | "!=" | "equal" | "notSame") RelationalExp)*
  RelationalExp = AdditiveExp (("<" | ">" | "bigger" | "smaller" | "in") AdditiveExp)*
  AdditiveExp = MultiplicativeExp (("plus" | "minus") MultiplicativeExp)*
  MultiplicativeExp = UnaryExp (("times" | "over" | "mod") UnaryExp)*

  // Unary Expressions
  UnaryExp = ("minus" | "not")? PrimaryExp

  // Primary Expressions 
  PrimaryExp = 
      "(" Exp ")"  --parens
    | FunCall      --functionCall
    | IndexedAccess --listIndexing
    | id           --identifier
    | IntLit       --integer
    | FloatLit     --float
    | StringLit    --string
    | ListExp      --list

  // Data Types
  Type = BasicType | ListType
  BasicType = "num" | "text" | "bool" | id
  ListType = "list" "[" Type "]" | "list" "<" Type ">" 

  // Identifiers (Ensuring they do not match keywords)
  id = ~keyword letter alnum*

  // Literals
  IntLit = digit+
  FloatLit = digit+ "." digit+ ("E" ("+" | "-")? digit+)?

  // String literals (Fixed to enforce proper error handling)
  StringLit = "\"" Char* "\"" --closed
            | "\"" Char*      --unclosed

  ListExp = "[" ListOf<(StringLit | Exp), ",">? "]"

  // Characters inside string literals
  Char = NormalChar | EscapeSeq | unicodeEscape
  NormalChar = ~Control ~"\\" ~"\"" any
  EscapeSeq = "\\" ("n" | "t" | "\"" | "\\")
  unicodeEscape = "\\u{" hexDigit+ "}"

  Control = "\x00".."\x1f" | "\x80".."\x9f"

  // Keywords 
  keyword = "Make" | "list" | "Show" | "When" | "Keep" | "orWhen" | "orElse"
          | "give" | "say" | "Break" | "Skip" | "Try" | "Catch" | "in"

  // Comments and Whitespace Handling
  space += " " | "\t"
  newline = "\n"
  comment = "#" (~"\n" any)*
  multiLineComment = "/*" (~"*/" any)* "*/"
  space += comment | multiLineComment
}
